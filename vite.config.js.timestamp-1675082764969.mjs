// vite.config.js
import { defineConfig as defineConfig4, loadEnv } from "file:///D:/project/vite-learn/node_modules/.pnpm/vite@4.0.4_sass@1.57.1/node_modules/vite/dist/node/index.js";

// vite.base.config.js
import { dirname as dirname2, resolve as resolve2 } from "node:path";
import postcssPresetEnv from "file:///D:/project/vite-learn/node_modules/.pnpm/postcss-preset-env@7.8.3_postcss@8.4.21/node_modules/postcss-preset-env/dist/index.mjs";
import { fileURLToPath as fileURLToPath2 } from "url";
import { defineConfig } from "file:///D:/project/vite-learn/node_modules/.pnpm/vite@4.0.4_sass@1.57.1/node_modules/vite/dist/node/index.js";
import { ViteAliases } from "file:///D:/project/vite-learn/node_modules/.pnpm/vite-aliases@0.10.0_sass@1.57.1/node_modules/vite-aliases/dist/index.js";
import Inspect from "file:///D:/project/vite-learn/node_modules/.pnpm/vite-plugin-inspect@0.7.15_vite@4.0.4/node_modules/vite-plugin-inspect/dist/index.mjs";

// plugins/createHtml.js
var createHtml_default = (options = {}) => ({
  name: options.name || "myCreateHtmlPlugin",
  transformIndexHtml(html, ctx) {
    return html.replace(/<title>(.*?)<\/title>/, `<title>${options.title || "title"}</title>`);
  }
});

// plugins/viteAliases.js
import fs from "node:fs/promises";
import { dirname, resolve } from "node:path";
import { fileURLToPath } from "url";
var __vite_injected_original_import_meta_url = "file:///D:/project/vite-learn/plugins/viteAliases.js";
var __filename = fileURLToPath(__vite_injected_original_import_meta_url);
var __dirname = dirname(__filename);
var basePath = "../src";
var getDirs = async () => {
  const result = {
    dirs: [],
    files: []
  };
  let res = await fs.readdir(resolve(__dirname, basePath));
  for (let item of res) {
    const stats = await fs.stat(resolve(__dirname, `${basePath}/${item}`));
    stats.isDirectory() ? result.dirs.push(item) : result.files.push(item);
  }
  return result;
};
var viteAliases_default = (options = {}) => ({
  name: options.name || "myVitePlugin",
  config: async (config, env) => {
    const prefix = options.prefix || "@";
    const { mode, command, ssrBuild } = env;
    let { dirs } = await getDirs();
    let result = {
      [prefix]: resolve(__dirname, `${basePath}`)
    };
    for (let dir of dirs) {
      let dirPath = resolve(__dirname, `${basePath}/${dir}`);
      result[`${prefix}${dir}`] = dirPath;
    }
    return {
      resolve: {
        alias: result
      }
    };
  }
});

// vite.base.config.js
import checker from "file:///D:/project/vite-learn/node_modules/.pnpm/vite-plugin-checker@0.5.5_gl4qsmwzp7wy5uclz4tx77gbli/node_modules/vite-plugin-checker/dist/esm/main.js";
var __vite_injected_original_import_meta_url2 = "file:///D:/project/vite-learn/vite.base.config.js";
var __filename2 = fileURLToPath2(__vite_injected_original_import_meta_url2);
var __dirname2 = dirname2(__filename2);
var vite_base_config_default = defineConfig({
  // resolve: {
  //   alias: {
  //     '@': resolve(__dirname, './src'),
  //   },
  // },
  // optimizeDeps: {
  //   exclude: ['lodash-es'], // 制定数组中的依赖不进行预构建
  // },
  css: {
    // 对css进行配置
    // modules最终会被传递给postcss-modules处理
    modules: {
      localsConvention: "camelCaseOnly",
      // 修改生成的配置对象的key的展现形式（驼峰还是中横线）,
      scopeBehaviour: "local"
      // 配置当前模块化行为是模块化还是全局化（有hash就是开启一个模块化标志，保证不同的hash来控制样式不被覆盖）
      // generateScopedName: '[name]_[local]_[hash:5]', // https://github.com/webpack/loader-utils#interpolatename
      // generateScopedName: (name, filename, css) => {
      //   // name：css中的类名，filename：css文件绝对路径，css：当前样式
      //   return `${name}_${Math.random().toString(36).substring(3, 8)}`;
      // },
      // hashPrefix: 'fc86', // 此字段最终会参与到hash中
      // globalModulePaths: ['./test.module.scss'], // 不参与到css模块化中的文件路径
    },
    // preprocessorOptions: {
    //   scss: {
    //     additionalData: `$injectedColor: orange;`,
    //   },
    // },
    // devSourcemap: true, // 开启css的sourceMap
    postcss: {
      plugins: [
        postcssPresetEnv({
          importFrom: resolve2(__dirname2, "./variable.css")
        })
      ]
    }
  },
  plugins: [
    Inspect(),
    viteAliases_default(),
    // ViteAliases()
    createHtml_default({
      title: "my title"
    }),
    checker({
      // e.g. use TypeScript check
      typescript: true
    })
  ],
  build: {
    minify: false,
    rollupOptions: {
      output: {
        assetFileNames: "[hash].[name].[ext]",
        manualChunks: (id) => {
          console.log("id\uFF1A", id);
          if (id.includes("node_modules")) {
            return "vender";
          }
        }
      }
    }
  }
});

// vite.dev.config.js
import { defineConfig as defineConfig2 } from "file:///D:/project/vite-learn/node_modules/.pnpm/vite@4.0.4_sass@1.57.1/node_modules/vite/dist/node/index.js";
var vite_dev_config_default = defineConfig2({});

// vite.prod.config.js
import { defineConfig as defineConfig3 } from "file:///D:/project/vite-learn/node_modules/.pnpm/vite@4.0.4_sass@1.57.1/node_modules/vite/dist/node/index.js";
var vite_prod_config_default = defineConfig3({});

// vite.config.js
var envResolver = {
  // 开发环境
  serve: () => ({ ...vite_base_config_default, ...vite_dev_config_default }),
  // 生产环境
  build: () => ({ ...vite_base_config_default, ...vite_prod_config_default })
};
var vite_config_default = defineConfig4(({ command, mode }) => {
  const env = loadEnv(mode, process.cwd(), "");
  return envResolver[command]();
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
